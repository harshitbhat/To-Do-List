{"version":3,"sources":["logo.svg","Todo.js","NewTodoForm.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleChange","handleUpdate","handleToggle","this","removeTodo","id","setState","evt","preventDefault","updateTodo","target","name","value","toggleTodo","className","onSubmit","type","onChange","completed","onClick","class","Component","NewTodoForm","handleSubmit","createTodo","uuid","htmlFor","placeholder","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","t","newTask","updateTodos","map","todo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66b09abc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\nimport './Todo.css';\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n      task: this.props.task,\n    };\n    this.handleRemove = this.handleRemove.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n  handleRemove() {\n    this.props.removeTodo(this.props.id);\n  }\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing });\n  }\n  handleUpdate(evt) {\n    evt.preventDefault();\n    this.props.updateTodo(this.props.id, this.state.task);\n    this.setState({ isEditing: false });\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n    });\n  }\n  handleToggle(evt) {\n    this.props.toggleTodo(this.props.id);\n  }\n  render() {\n    let result;\n    if (this.state.isEditing) {\n      result = (\n        <div className=\"Todo\">\n          <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n            <input\n              type=\"text\"\n              value={this.state.task}\n              name=\"task\"\n              onChange={this.handleChange}\n            />\n            <button>Save Changes</button>\n          </form>\n        </div>\n      );\n    } else {\n      result = (\n        <div className=\"Todo\">\n          <li\n            className={\n              this.props.completed ? 'Todo-task completed' : 'Todo-task'\n            }\n            onClick={this.handleToggle}\n          >\n            {this.props.task}\n          </li>\n          <div className=\"Todo-buttons\">\n            <button onClick={this.toggleForm}>\n              <i class=\"fas fa-pen\" />\n            </button>\n            <button onClick={this.handleRemove}>\n              <i class=\"fas fa-trash\" />\n            </button>\n          </div>\n        </div>\n      );\n    }\n    return result;\n  }\n}\n\nexport default Todo;\n","import React, { Component } from 'react';\nimport './NewTodoForm.css';\nimport uuid from 'uuid/v4';\n\nclass NewTodoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      task: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n    });\n  }\n  handleSubmit(evt) {\n    evt.preventDefault();\n    this.props.createTodo({ ...this.state, id: uuid(), completed: false });\n    this.setState({ task: '' });\n  }\n  render() {\n    return (\n      <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"task\">New Todo: </label>\n        <input\n          type=\"text\"\n          placeholder=\"New Todo\"\n          id=\"task\"\n          name=\"task\"\n          value={this.state.task}\n          onChange={this.handleChange}\n        />\n        <button>Add Todo</button>\n      </form>\n    );\n  }\n}\n\nexport default NewTodoForm;\n","import React, { Component } from 'react';\nimport Todo from './Todo';\nimport NewTodoForm from './NewTodoForm';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n    };\n    this.create = this.create.bind(this);\n    this.remove = this.remove.bind(this);\n    this.update = this.update.bind(this);\n    this.toggleCompletion = this.toggleCompletion.bind(this);\n  }\n  create(newTodo) {\n    this.setState({\n      todos: [...this.state.todos, newTodo],\n    });\n  }\n  remove(id) {\n    this.setState({\n      todos: this.state.todos.filter((t) => t.id !== id),\n    });\n  }\n  update(id, newTask) {\n    const updateTodos = this.state.todos.map((todo) => {\n      if (todo.id === id) {\n        return { ...todo, task: newTask };\n      } else {\n        return todo;\n      }\n    });\n    this.setState({ todos: updateTodos });\n  }\n  toggleCompletion(id) {\n    const updateTodos = this.state.todos.map((todo) => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      } else {\n        return todo;\n      }\n    });\n    this.setState({ todos: updateTodos });\n  }\n  render() {\n    const todos = this.state.todos.map((todo) => (\n      <Todo\n        key={todo.id}\n        task={todo.task}\n        removeTodo={this.remove}\n        updateTodo={this.update}\n        completed={todo.completed}\n        id={todo.id}\n        toggleTodo={this.toggleCompletion}\n      />\n    ));\n    return (\n      <div className=\"TodoList\">\n        <h1>\n          Todo List<span>A Simple React Todo List</span>\n        </h1>\n        <ul>{todos}</ul>\n        <NewTodoForm createTodo={this.create} />\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import logo from './logo.svg';\nimport './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}